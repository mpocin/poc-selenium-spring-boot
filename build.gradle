/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    mavenCentral()
}

// Source and resource directory for integration-test
sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functional-test/java')
        }
        resources.srcDir file('src/functional-test/resources')
    }
}

// Dependencies configuration for integration-test
configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
}

dependencies {

    compile("org.springframework.boot:spring-boot-starter-web")

    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.+'
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '3.+'
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '3.+'
	testCompile group: 'org.seleniumhq.selenium', name: 'selenium-api', version: '3.+'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.8.RELEASE'
	
    // Use JUnit test framework
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Used for integration test
task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}

// Create different reports based on which type of test was executed
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

